name: Build, Sync, and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Run deploy even if nothing changed"
        type: boolean
        default: false
      force_api_build:
        description: "Rebuild/push API image even if unchanged"
        type: boolean
        default: false
      force_dashboard_build:
        description: "Rebuild dashboard even if unchanged"
        type: boolean
        default: false
      force_restart:
        description: "Restart services at the end (even if no updates)"
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE_NAME: api

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      dashboard: ${{ steps.filter.outputs.dashboard }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            # API Docker image build inputs
            api:
              - 'apps/api/**'
              - 'apps/api/Dockerfile'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if API imports from shared packages

            # Dashboard static build inputs
            dashboard:
              - 'apps/dashboard/**'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if dashboard imports from shared packages

            # Infra files that should be synced to the server
            infra:
              - 'infra/**'
              - '.github/workflows/**'

  build-api:
    name: Build and push API (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_api_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build with per-app cache and narrow context to avoid invalidations
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.run_id=${{ github.run_id }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign images with Cosign (Keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod

  build-dashboard:
    name: Build dashboard (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.dashboard == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_dashboard_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      # Keep this if your dashboard depends on generated contracts
      - name: Build contracts package
        run: pnpm run generate

      - name: Build dashboard
        working-directory: apps/dashboard
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # Make dist available to the deploy job
      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist
          if-no-files-found: error
          retention-days: 3

  deploy:
    name: Deploy
    needs: [detect-changes, build-api, build-dashboard]
    if: >
      always() && (
        (github.event_name == 'workflow_dispatch' && inputs.force_deploy)
        || needs.detect-changes.outputs.api == 'true'
        || needs.detect-changes.outputs.dashboard == 'true'
        || needs.detect-changes.outputs.infra == 'true'
      )
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.orbitcheck.io # update if different
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dashboard artifact
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist

      - name: Upload infra to server
        if: needs.detect-changes.outputs.infra == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "infra/**"
          target: "/tmp/ci/infra"

      - name: Upload dashboard dist to server
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "apps/dashboard/dist/**"
          target: "/tmp/ci/dashboard-dist"

      - name: Deploy files and restart services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail

            # Section 1: Root-level file operations
            echo "--- Running file tasks as root (via sudo) ---"
            if [[ "${{ needs.detect-changes.outputs.infra }}" == "true" && -d /tmp/ci/infra/compose ]]; then
              sudo mkdir -p /srv/myapp/caddy
              if [ -f /tmp/ci/infra/compose/Caddyfile ]; then
                sudo cp /tmp/ci/infra/compose/Caddyfile /srv/myapp/caddy/Caddyfile
                sudo chown -R podmanuser:podmanuser /srv/myapp
              fi
            fi
            if [[ "${{ needs.detect-changes.outputs.dashboard }}" == "true" && -d /tmp/ci/dashboard-dist ]]; then
              sudo mkdir -p /var/lib/containers/volumes/caddy-dashboard/_data
              sudo rsync -a --delete /tmp/ci/dashboard-dist/ /var/lib/containers/volumes/caddy-dashboard/_data/
              sudo chown -R podmanuser:podmanuser /var/lib/containers/volumes/caddy-dashboard/_data
            fi

            # Section 2: Podmanuser-level operations
            echo "--- Running systemd tasks as podmanuser ---"

            # Verify Quadlet generator is installed
            if ! sudo test -x /etc/systemd/user-generators/podman-quadlet && \
              ! sudo test -x /usr/lib/systemd/user-generators/podman-quadlet; then
              echo "ERROR: Podman Quadlet generator not found!"
              exit 1
            fi

            sudo -iu podmanuser bash <<'EOF'
              set -euo pipefail
              export XDG_RUNTIME_DIR="/run/user/$(id -u)"

              # Record deploy start time for the log step
              date +%s > "$HOME/.deploy_start_epoch"

              # First, copy new Quadlet files so we know what services to manage
              if [[ -d /tmp/ci/infra ]]; then
                echo "Copying Quadlet files..."
                mkdir -p "$HOME/.config/containers/systemd"
                find /tmp/ci/infra -type f \( -name "*.pod" -o -name "*.container" -o -name "*.volume" -o -name "*.network" \) \
                  -exec cp {} "$HOME/.config/containers/systemd/" \;
              fi

              # Discover service names from the quadlet files to create a dynamic grep pattern
              echo "--- Discovering managed services from Quadlet files ---"
              shopt -s nullglob
              MANAGED_SERVICES=()
              for f in "$HOME/.config/containers/systemd"/*.{pod,container}; do
                [ -f "$f" ] || continue
                base="${f##*/}"
                name="${base%.*}" # Remove .pod or .container extension
                MANAGED_SERVICES+=("$name")
              done

              GREP_PATTERN=""
              if ((${#MANAGED_SERVICES[@]} > 0)); then
                GREP_PATTERN=$(printf "%s\n" "${MANAGED_SERVICES[@]}" | sort -u | paste -sd '|')
                echo "Found managed services. Pattern: ($GREP_PATTERN)"
              else
                echo "WARNING: No Quadlet files found. No services will be stopped."
              fi

              # Stop existing services first to avoid port conflicts, only if we found services
              if [[ -n "$GREP_PATTERN" ]]; then
                echo "--- Stopping existing services ---"
                systemctl --user list-units --all --no-legend --plain '*-pod.service' '*.service' | \
                  grep -E "($GREP_PATTERN)" | \
                  awk '{print $1}' | xargs -r systemctl --user stop || true
              fi
              
              # Give containers time to stop
              sleep 2
              
              # Clean up any lingering containers
              podman pod rm -fa || true
              podman rm -fa || true

              echo "--- Quadlet dir now contains ---"
              ls -al "$HOME/.config/containers/systemd" || true

              # Force regeneration of systemd units
              echo "--- Regenerating systemd units ---"
              rm -rf "$XDG_RUNTIME_DIR/systemd/generator"
              systemctl --user daemon-reload
              
              # Wait a moment for generator to complete
              sleep 2

              # Check what units were generated
              echo "--- Generated units ---"
              ls -la "$XDG_RUNTIME_DIR/systemd/generator/" 2>/null || echo "No generator directory found"
              
              # Discover and start units from generated files
              shopt -s nullglob
              POD_UNITS=()
              for f in "$HOME/.config/containers/systemd"/*.pod; do
                b="${f##*/}"; n="${b%.pod}"; unit="${n}-pod.service"
                if [ -f "$XDG_RUNTIME_DIR/systemd/generator/$unit" ]; then POD_UNITS+=("$unit"); fi
              done

              CONTAINER_UNITS=()
              for f in "$HOME/.config/containers/systemd"/*.container; do
                b="${f##*/}"; n="${b%.container}"; unit="${n}.service"
                if [ -f "$XDG_RUNTIME_DIR/systemd/generator/$unit" ]; then CONTAINER_UNITS+=("$unit"); fi
              done

              echo "Pods to start:       ${POD_UNITS[*]:-<none>}"
              echo "Containers to start: ${CONTAINER_UNITS[*]:-<none>}"

              # Start services
              ALL_UNITS=("${POD_UNITS[@]}" "${CONTAINER_UNITS[@]}")
              if ((${#ALL_UNITS[@]} > 0)); then
                for unit in "${ALL_UNITS[@]}"; do
                  echo "Starting unit: $unit"
                  systemctl --user enable --now "$unit" || {
                    echo "ERROR: Failed to start $unit. See logs below."
                    systemctl --user status "$unit" --no-pager || true
                    journalctl --user -u "$unit" --no-pager -n 50 || true
                  }
                done
              fi

              echo "--- Final status of managed services ---"
              if [[ -n "$GREP_PATTERN" ]]; then
                systemctl --user list-units --type=service --all '*-pod.service' '*.service' | \
                  grep -E "($GREP_PATTERN)|UNIT" || true
              else
                echo "No managed services to display."
              fi
            EOF

            # Section 3: Cleanup
            echo "--- Cleaning up temporary files ---"
            sudo rm -rf /tmp/ci

      - name: Wait for containers to fully start
        if: always()
        run: sleep 30

      - name: Dump Quadlet/container logs to Actions
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail

            POD_USER="podmanuser"
            POD_UNIT="orbitcheck.service"
            UID_NUM="$(id -u "$POD_USER")"

            # Use the timestamp written by deploy; else 30m
            if sudo test -f "/home/$POD_USER/.deploy_start_epoch"; then
              SINCE="@$(sudo cat /home/$POD_USER/.deploy_start_epoch)"
            else
              SINCE="$(date -d '30 minutes ago' +'%Y-%m-%d %H:%M:%S')"
            fi

            echo "::group::Pod unit logs ($POD_UNIT, since $SINCE)"
            sudo journalctl --no-pager -o short-iso --since "$SINCE" _SYSTEMD_USER_UNIT="$POD_UNIT" _UID="$UID_NUM" || true
            echo "::endgroup::"

            # Names from Quadlets
            mapfile -t names_quadlet < <(
              sudo -iu "$POD_USER" bash -lc '
                set -euo pipefail
                shopt -s nullglob
                CONFIG_DIR=$(getent passwd $USER | cut -d: -f6)/.config/containers/systemd
                if [ -d "$CONFIG_DIR" ]; then
                  for f in "$CONFIG_DIR"/*.container; do
                    name=$(sed -n "s/^ContainerName=//p" "$f" | head -n1)
                    if [ -z "$name" ]; then
                      base="${f##*/}"
                      name="${base%.container}"
                    fi
                    printf "%s\n" "$name"
                  done
                fi
              ' | sort -u
            )

            # Names from generator dir (container-*.service => name)
            mapfile -t names_gen < <(
              sudo bash -lc '
                shopt -s nullglob
                for f in /run/user/'"$UID_NUM"'/systemd/generator/*.service; do
                  b="${f##*/}"; n="${b%.service}"; printf "%s\n" "$n"
                done | sort -u
              ' || true
            )

            # Names seen in events during this deploy window
            mapfile -t names_events < <(
              sudo -iu "$POD_USER" bash -lc '
                podman events --since "'"$SINCE"'" --until "$(date +%s)" --no-trunc 2>/dev/null \
                | awk '\''/^container / { if (match($0, /name=([^, )]+)/, m)) print m[1] }'\'' \
                | sort -u
              ' || true
            )

            # Merge/dedupe
            mapfile -t all_names < <(printf "%s\n" "${names_quadlet[@]}" "${names_gen[@]}" "${names_events[@]}" | awk "NF" | sort -u)

            echo "::group::Container logs (since $SINCE)"
            if [[ ${#all_names[@]} -eq 0 ]]; then
              echo "No container names discovered; dumping conmon logs for this UID"
              sudo -iu "$POD_USER" journalctl --user --no-pager -o short-iso --since "$SINCE" SYSLOG_IDENTIFIER=conmon || \
              sudo journalctl --no-pager -o short-iso --since "$SINCE" _UID="$UID_NUM" SYSLOG_IDENTIFIER=conmon || true
            else
              for name in "${all_names[@]}"; do
                echo "----- container: ${name} -----"
                sudo -iu "$POD_USER" journalctl --user --no-pager -o short-iso --since "$SINCE" CONTAINER_NAME="$name" || true
                sudo journalctl --no-pager -o short-iso --since "$SINCE" _UID="$UID_NUM" CONTAINER_NAME="$name" || true
              done
            fi
            echo "::endgroup::"
