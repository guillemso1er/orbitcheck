name: Build, Sync, and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Run deploy even if nothing changed"
        type: boolean
        default: false
      force_api_build:
        description: "Rebuild/push API image even if unchanged"
        type: boolean
        default: false
      force_dashboard_build:
        description: "Rebuild dashboard even if unchanged"
        type: boolean
        default: false
      force_restart:
        description: "Restart services at the end (even if no updates)"
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE_NAME: api

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      dashboard: ${{ steps.filter.outputs.dashboard }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            # API Docker image build inputs
            api:
              - 'apps/api/**'
              - 'apps/api/Dockerfile'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if API imports from shared packages

            # Dashboard static build inputs
            dashboard:
              - 'apps/dashboard/**'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if dashboard imports from shared packages

            # Infra files that should be synced to the server
            infra:
              - 'infra/**'
              - '.github/workflows/**'

  build-api:
    name: Build and push API (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_api_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build with per-app cache and narrow context to avoid invalidations
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.run_id=${{ github.run_id }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign images with Cosign (Keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod

  build-dashboard:
    name: Build dashboard (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.dashboard == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_dashboard_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      # Keep this if your dashboard depends on generated contracts
      - name: Build contracts package
        run: pnpm run generate

      - name: Build dashboard
        working-directory: apps/dashboard
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # Make dist available to the deploy job
      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist
          if-no-files-found: error
          retention-days: 3

  deploy:
    name: Deploy
    needs: [detect-changes, build-api, build-dashboard]
    if: >
      always() && (
        (github.event_name == 'workflow_dispatch' && inputs.force_deploy)
        || needs.detect-changes.outputs.api == 'true'
        || needs.detect-changes.outputs.dashboard == 'true'
        || needs.detect-changes.outputs.infra == 'true'
      )
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.orbitcheck.io # update if different
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Pull down the built dashboard only when needed
      - name: Download dashboard artifact
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist

      # Upload infra files if they changed
      - name: Upload infra to server
        if: needs.detect-changes.outputs.infra == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "infra/**"
          target: "/tmp/ci/infra"

      # Upload dashboard dist only if it was rebuilt
      - name: Upload dashboard dist to server
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "apps/dashboard/dist/**"
          target: "/tmp/ci/dashboard-dist"

      - name: Deploy files and restart services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail

            # Section 1: Root-level file operations (No changes)
            echo "--- Running file tasks as root (via sudo) ---"
            if [[ "${{ needs.detect-changes.outputs.infra }}" == "true" && -d /tmp/ci/infra/compose ]]; then
              sudo mkdir -p /srv/myapp/caddy
              if [ -f /tmp/ci/infra/compose/Caddyfile ]; then
                sudo cp /tmp/ci/infra/compose/Caddyfile /srv/myapp/caddy/Caddyfile
                sudo chown -R podmanuser:podmanuser /srv/myapp
              fi
            fi
            if [[ "${{ needs.detect-changes.outputs.dashboard }}" == "true" && -d /tmp/ci/dashboard-dist ]]; then
              sudo mkdir -p /var/lib/containers/volumes/caddy-dashboard/_data
              sudo rsync -a --delete /tmp/ci/dashboard-dist/ /var/lib/containers/volumes/caddy-dashboard/_data/
              sudo chown -R podmanuser:podmanuser /var/lib/containers/volumes/caddy-dashboard/_data
            fi

            # Section 2: Podmanuser-level operations
            echo "--- Running systemd tasks as podmanuser ---"
            sudo -iu podmanuser bash <<'EOF'
              set -euo pipefail

              POD_UNIT="orbitcheck-pod.service"

              # STEP 0: record the deploy start time so we can query logs later
              date +%s > "$HOME/.deploy_start_epoch"

              # STEP 1: Copy new unit files.
              if [[ "${{ needs.detect-changes.outputs.infra }}" == "true" && -d /tmp/ci/infra ]]; then
                echo "Copying new Quadlet files..."
                mkdir -p ~/.config/containers/systemd
                find /tmp/ci/infra -type f \( -name "*.pod" -o -name "*.container" -o -name "*.volume" -o -name "*.network" \) -exec cp {} ~/.config/containers/systemd/ \;
              fi

              # STEP 2: Manually run the generator.
              echo "--- Manually running the Quadlet generator ---"
              GENERATOR_PATH="/usr/libexec/podman/quadlet"
              OUTPUT_DIR="/run/user/$(id -u)/systemd/generator"
              rm -rf "${OUTPUT_DIR:?}"/*
              mkdir -p "${OUTPUT_DIR}"
              "${GENERATOR_PATH}" --user --no-kmsg-log "${OUTPUT_DIR}"
              echo "Quadlet generator executed."

              # STEP 3: Stop old service (if exists)
              echo "--- Stopping the old pod service (if it exists) ---"
              systemctl --user stop "$POD_UNIT" || true

              # STEP 4: Reload daemon
              echo "--- Reloading systemd daemon ---"
              systemctl --user daemon-reload

              # STEP 5: Start new version
              echo "--- Starting the main pod service ---"
              systemctl --user start "$POD_UNIT"

              echo "--- Deployment complete. Checking status in 15 seconds... ---"
              sleep 15
              echo "::group::Systemd status ($POD_UNIT)"
              systemctl --user --no-pager status "$POD_UNIT" || true
              echo "::endgroup::"
            EOF

            # Section 3: Cleanup
            echo "--- Cleaning up temporary files ---"
            sudo rm -rf /tmp/ci

      - name: Wait for Health Check
        run: |
          for i in {1..30}; do
            if curl -fsS https://your-domain.com/api/health >/dev/null; then
              echo "â Application is healthy!"
              exit 0
            fi
            echo "Waiting for application to become healthy... ($i/30)"
            sleep 3
          done
          echo "â Health check failed."
          exit 1

      - name: Dump Quadlet/container logs to Actions
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo -iu podmanuser bash <<'EOF'
              set -euo pipefail

              POD_USER="podmanuser"
              POD_UNIT="orbitcheck-pod.service"
              UID_NUM="$(id -u "$POD_USER")"

              # Determine time window
              if sudo -u "$POD_USER" test -f ~"$POD_USER"/.deploy_start_epoch; then
                SINCE="@$(sudo -u "$POD_USER" cat ~"$POD_USER"/.deploy_start_epoch)"
              else
                SINCE="$(date -d '30 minutes ago' +'%Y-%m-%d %H:%M:%S')"
              fi

              echo "::group::Aggregated container logs (system journal) since ${SINCE}"

              # Discover generated container units (most reliable)
              GEN_DIR="/run/user/${UID_NUM}/systemd/generator"
              mapfile -t container_units < <(ls -1 "${GEN_DIR}"/container-*.service 2>/dev/null | xargs -n1 -I{} basename {} || true)

              # Fallback: ask the user's systemd for any container-* units
              if [[ ${#container_units[@]} -eq 0 ]]; then
                mapfile -t container_units < <(
                  sudo -u "$POD_USER" systemctl --user list-units --type=service --all --no-legend \
                    | awk '/container-.*\.service/ {print $1}' | sort -u
                )
              fi

              # Always print the pod unit logs first
              echo "----- pod: ${POD_UNIT} -----"
              sudo journalctl --no-pager -o short-iso --since "$SINCE" _SYSTEMD_USER_UNIT="$POD_UNIT" || true

              if [[ ${#container_units[@]} -eq 0 ]]; then
                echo "No container-* units detected; showing any recent container logs for this UID."
                sudo journalctl --no-pager -o short-iso --since "$SINCE" _UID="$UID_NUM" CONTAINER_NAME=+ || true
              else
                for u in "${container_units[@]}"; do
                  name="${u#container-}"; name="${name%.service}"
                  echo "----- container: ${name} (${u}) -----"
                  # Prefer logs tagged by the container name; fall back to the unit
                  sudo journalctl --no-pager -o short-iso --since "$SINCE" _UID="$UID_NUM" CONTAINER_NAME="$name" || \
                  sudo journalctl --no-pager -o short-iso --since "$SINCE" _SYSTEMD_USER_UNIT="$u" || true
                done
              fi

              echo "::endgroup::"
