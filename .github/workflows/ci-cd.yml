name: Build, Sync, and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Run deploy even if nothing changed"
        type: boolean
        default: false
      force_api_build:
        description: "Rebuild/push API image even if unchanged"
        type: boolean
        default: false
      force_dashboard_build:
        description: "Rebuild dashboard even if unchanged"
        type: boolean
        default: false
      force_restart:
        description: "Restart services at the end (even if no updates)"
        type: boolean
        default: false
      debug:
        description: "Enable verbose bash tracing"
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # General & Docker
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE_NAME: api
  API_DOCKERFILE_PATH: ./apps/api/Dockerfile
  PNPM_VERSION: 9.12.0

  # Caddy (reverse proxy + dashboard)
  CADDY_IMAGE_NAME: caddy
  CADDY_DOCKERFILE_PATH: ./infra/quadlets/caddy/Containerfile

  # Dashboard
  DASHBOARD_ARTIFACT_NAME: dashboard-dist
  DASHBOARD_DIST_PATH: apps/dashboard/dist

  # Deployment - Remote Server
  REMOTE_USER: adminuser
  REMOTE_TARGET_BASE_DIR: /tmp/ci
  REMOTE_RUNTIME_USER: podmanuser
  REMOTE_CONFIGS_DIR: /var/lib/containers/configs
  REMOTE_DASHBOARD_VOLUME_DIR: /var/lib/containers/volumes/caddy-dashboard/_data
  REMOTE_SYSTEMD_USER_DIR: .config/containers/systemd
  DEBUG: ${{ inputs.debug && '1' || '0' }}

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      dashboard: ${{ steps.filter.outputs.dashboard }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'apps/api/Dockerfile'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - 'package.json'
              - 'tsconfig.base.json'
            dashboard:
              - 'apps/dashboard/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - 'package.json'
              - 'tsconfig.base.json'
            infra:
              - 'infra/**'
              - '.github/workflows/**'
              - '.github/scripts/**'

  build-caddy:
    name: Build and push Caddy (dashboard + reverse proxy)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.dashboard == 'true' || needs.detect-changes.outputs.infra == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_dashboard_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        # Fetch full history helps metadata/tagging in some setups
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (generate tags and labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.CADDY_IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=prod,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Caddy + dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.CADDY_DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PNPM_VERSION=${{ env.PNPM_VERSION }}
            DASHBOARD_FILTER=@orbitcheck/dashboard
            CONTRACTS_FILTER=@orbitcheck/contracts
            DASHBOARD_DIR=apps/dashboard
            DASHBOARD_BUILD_DIR=apps/dashboard/dist
          cache-from: type=registry,ref=${{ env.IMAGE_REF }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REF }}:buildcache,mode=max
  
  build-api:
    name: Build and push API (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_api_build)
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.API_DOCKERFILE_PATH }}
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.run_id=${{ github.run_id }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign images with Cosign (Keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod


  deploy:
    name: Deploy
    needs: [detect-changes, build-api, build-caddy]
    if: >
      always() && (
        (github.event_name == 'workflow_dispatch' && inputs.force_deploy)
        || needs.detect-changes.outputs.api == 'true'
        || needs.detect-changes.outputs.dashboard == 'true'
        || needs.detect-changes.outputs.infra == 'true'
      )
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.orbitcheck.io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dashboard artifact
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DASHBOARD_ARTIFACT_NAME }}
          path: ${{ env.DASHBOARD_DIST_PATH }}

      - name: Clean up previous deployment directory on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            echo "Removing old deployment directory ${{ env.REMOTE_TARGET_BASE_DIR }}..."
            # Use sudo to ensure we can remove the directory even if ownership
            # was changed to another user in a previous failed run.
            sudo rm -rf "${{ env.REMOTE_TARGET_BASE_DIR }}"
            echo "Cleanup complete."

      - name: Upload infra to server
        if: needs.detect-changes.outputs.infra == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_deploy)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "infra/**"
          target: "${{ env.REMOTE_TARGET_BASE_DIR }}/infra"
          strip_components: 1

      - name: Upload dashboard dist to server
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "${{ env.DASHBOARD_DIST_PATH }}/**"
          target: "${{ env.REMOTE_TARGET_BASE_DIR }}/dashboard-dist"

      - name: Copy project files and deploy script
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: ".github/scripts/deploy.sh"
          target: "${{ env.REMOTE_TARGET_BASE_DIR }}"
          strip_components: 2

      - name: Deploy files and restart services
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEBUG: "1"
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          envs: NEEDS_INFRA_CHANGES,NEEDS_DASHBOARD_CHANGES,NEEDS_API_CHANGES,IS_WORKFLOW_DISPATCH,FORCE_DEPLOY,REMOTE_TARGET_BASE_DIR,REMOTE_CONFIGS_DIR,REMOTE_DASHBOARD_VOLUME_DIR,REMOTE_RUNTIME_USER,REMOTE_SYSTEMD_USER_DIR,REGISTRY,IMAGE_OWNER,API_IMAGE_NAME
          script: |
            set -euo pipefail

            # Export variables for the deploy script
            export NEEDS_INFRA_CHANGES="${{ needs.detect-changes.outputs.infra }}"
            export NEEDS_DASHBOARD_CHANGES="${{ needs.detect-changes.outputs.dashboard }}"
            export NEEDS_API_CHANGES="${{ needs.detect-changes.outputs.api }}"
            export IS_WORKFLOW_DISPATCH="${{ github.event_name == 'workflow_dispatch' }}"
            export FORCE_DEPLOY="${{ inputs.force_deploy }}"

            # Ensure script is executable and run it
            chmod +x "${{ env.REMOTE_TARGET_BASE_DIR }}/deploy.sh"
            "${{ env.REMOTE_TARGET_BASE_DIR }}/deploy.sh"
