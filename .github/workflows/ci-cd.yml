name: Build, Sync, and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Run deploy even if nothing changed"
        type: boolean
        default: false
      force_api_build:
        description: "Rebuild/push API image even if unchanged"
        type: boolean
        default: false
      force_dashboard_build:
        description: "Rebuild dashboard even if unchanged"
        type: boolean
        default: false
      force_restart:
        description: "Restart services at the end (even if no updates)"
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE_NAME: api

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      dashboard: ${{ steps.filter.outputs.dashboard }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            # API Docker image build inputs
            api:
              - 'apps/api/**'
              - 'apps/api/Dockerfile'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if API imports from shared packages

            # Dashboard static build inputs
            dashboard:
              - 'apps/dashboard/**'
              - 'pnpm-lock.yaml'
              - 'packages/**'        # include if dashboard imports from shared packages

            # Infra files that should be synced to the server
            infra:
              - 'infra/**'
              - '.github/workflows/**'

  build-api:
    name: Build and push API (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.api == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_api_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build with per-app cache and narrow context to avoid invalidations
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.run_id=${{ github.run_id }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign images with Cosign (Keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod

  build-dashboard:
    name: Build dashboard (only if changed)
    needs: [detect-changes]
    if: needs.detect-changes.outputs.dashboard == 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_dashboard_build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      # Keep this if your dashboard depends on generated contracts
      - name: Build contracts package
        run: pnpm run generate

      - name: Build dashboard
        working-directory: apps/dashboard
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # Make dist available to the deploy job
      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist
          if-no-files-found: error
          retention-days: 3

  deploy:
    name: Deploy
    needs: [detect-changes, build-api, build-dashboard]
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.force_deploy)
      || needs.detect-changes.outputs.api == 'true'
      || needs.detect-changes.outputs.dashboard == 'true'
      || needs.detect-changes.outputs.infra == 'true'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.orbitcheck.io # update if different
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Pull down the built dashboard only when needed
      - name: Download dashboard artifact
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dashboard-dist
          path: apps/dashboard/dist

      # Upload infra files if they changed
      - name: Upload infra to server
        if: needs.detect-changes.outputs.infra == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "infra/**"
          target: "/tmp/ci/infra"

      # Upload dashboard dist only if it was rebuilt
      - name: Upload dashboard dist to server
        if: needs.detect-changes.outputs.dashboard == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "apps/dashboard/dist/**"
          target: "/tmp/ci/dashboard-dist"

      - name: Place files and reload services (remote)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "--- Running tasks as root (via adminuser's sudo) ---"

            # Create system-level directories if infra files were synced
            if [ -d /tmp/ci/infra/compose ]; then
              sudo mkdir -p /srv/myapp/caddy
              if [ -f /tmp/ci/infra/compose/Caddyfile ]; then
                sudo cp /tmp/ci/infra/compose/Caddyfile /srv/myapp/caddy/Caddyfile
                sudo chown -R podmanuser:podmanuser /srv/myapp
              fi
            fi

            # Create the Caddy volume data directory and set permissions
            if [ -d /tmp/ci/dashboard-dist ]; then
              sudo mkdir -p /var/lib/containers/volumes/caddy-dashboard/_data
              # Use rsync with sudo to write to the protected location
              sudo rsync -a --delete /tmp/ci/dashboard-dist/ /var/lib/containers/volumes/caddy-dashboard/_data/
              # Ensure the podman user owns the files inside the volume
              sudo chown -R podmanuser:podmanuser /var/lib/containers/volumes/caddy-dashboard/_data
            fi

            echo "--- Running tasks as podmanuser ---"
            # Now, switch to the podmanuser for user-specific tasks
            sudo -n -u podmanuser bash <<'EOF'
            set -euo pipefail

            # Copy quadlet files if they exist
            if [ -d /tmp/ci/infra ]; then
              mkdir -p ~/.config/containers/systemd
              # Copy any new/updated systemd unit files for podman
              cp /tmp/ci/infra/*.{pod,container,volume,network} ~/.config/containers/systemd/ 2>/dev/null || true
            fi

            # Reload the user's systemd daemon to recognize new/changed unit files
            echo "Reloading systemd user daemon..."
            systemctl --user daemon-reload
            echo "Reload complete."
            EOF

            # Clean up the temporary CI directory as adminuser
            echo "--- Cleaning up temporary files ---"
            rm -rf /tmp/ci

      - name: Trigger remote auto-update
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "Triggering Podman auto-update..."
            sudo -n -u podmanuser systemctl --user start podman-auto-update.service
            sleep 5
            echo "Checking update status..."
            sudo -n -u podmanuser systemctl --user --no-pager status podman-auto-update.service || true

      - name: Force restart services
        if: github.event_name == 'workflow_dispatch' && inputs.force_restart
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            sudo -n -u podmanuser systemctl --user restart api.container || true
            sudo -n -u podmanuser systemctl --user restart caddy.container || true

      - name: Wait for Health Check
        run: |
          for i in {1..30}; do
            if curl -fsS https://your-domain.com/api/health >/dev/null; then
              echo "✅ Application is healthy!"
              exit 0
            fi
            echo "Waiting for application to become healthy... ($i/30)"
            sleep 3
          done
          echo "❌ Health check failed."
          exit 1
