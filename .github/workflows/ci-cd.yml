name: Build, Sync, and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write   # Required for Cosign keyless signing
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE_NAME: api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Build and Push API Image ---
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/api/Dockerfile # Adjust path to your API's Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # --- Build Dashboard Static Files ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies and build dashboard
        run: |
          cd apps/dashboard
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign images with Cosign (Keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.API_IMAGE_NAME }}:prod

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-domain.com # Change this to your actual domain
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- New Step: Upload Quadlet and Config Files ---
      - name: Sync infrastructure files to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            # Create a temporary directory for the upload
            TMP_DIR=$(mktemp -d)
            # Securely copy the infra files to the temp directory on the server
            scp -r ./infra/* $TMP_DIR
            
            # Use sudo to move files into place as podmanuser and set permissions
            sudo -n -u podmanuser bash <<'EOF'
            # Ensure the target directory exists
            mkdir -p ~/.config/containers/systemd
            # Copy the quadlet files
            cp /tmp/infra/*.{pod,container,volume} ~/.config/containers/systemd/

            # Ensure Caddyfile directory exists
            mkdir -p /srv/myapp/caddy
            # Copy the Caddyfile
            cp /tmp/infra/compose/Caddyfile /srv/myapp/caddy/Caddyfile

            # Copy dashboard static files
            mkdir -p /var/lib/containers/volumes/caddy-dashboard/_data
            cp -r /tmp/apps/dashboard/dist/* /var/lib/containers/volumes/caddy-dashboard/_data/
            EOF
            
            # Clean up the temporary directory
            rm -rf $TMP_DIR
            
            # Reload systemd to pick up any changes to the unit files
            echo "Reloading systemd user daemon..."
            sudo -n -u podmanuser systemctl --user daemon-reload

      - name: Trigger remote auto-update
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: adminuser
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            echo "Triggering Podman auto-update..."
            sudo -n -u podmanuser systemctl --user start podman-auto-update.service
            
            # Wait a moment for the service to start its work
            sleep 5
            
            echo "Checking update status..."
            sudo -n -u podmanuser systemctl --user --no-pager status podman-auto-update.service || true

      - name: Wait for Health Check
        run: |
          for i in {1..30}; do
            if curl -fsS https://your-domain.com/api/health >/dev/null; then # Adjust health check URL
              echo "✅ Application is healthy!"
              exit 0
            fi
            echo "Waiting for application to become healthy... ($i/30)"
            sleep 3
          done
          echo "❌ Health check failed."
          exit 1