#!/usr/bin/env zx

import { constants } from 'fs';
import { access, readFile, writeFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const SCRIPT_DIR = __dirname;

// ============================================================================
// Script Configuration
// ============================================================================
export const SCRIPT_CONFIG = {
    SCRIPT_NAME: 'setup.mjs',
    SCRIPT_DIR,
    INFRA_DIR: join(SCRIPT_DIR, 'infra'),
    COMPOSE_DIR: join(SCRIPT_DIR, 'infra/compose')
};

// ============================================================================
// Infisical Configuration
// ============================================================================
export const config = {
    BASE: process.env.INFISICAL_SITE_URL || 'http://localhost:8085',
    ADMIN_EMAIL: process.env.INFISICAL_ADMIN_EMAIL || 'admin@orbicheck.local',
    ADMIN_PASSWORD: process.env.INFISICAL_ADMIN_PASSWORD || 'AdminPass123!',
    ORG_NAME: process.env.INFISICAL_ORG || 'orbicheck',
    PROJECT_NAME: process.env.INFISICAL_PROJECT || 'orbicheck',
    IDENTITY_NAME: process.env.INFISICAL_IDENTITY || 'orbicheck-reader',
    TOKEN_TTL: parseInt(process.env.INFISICAL_TOKEN_TTL || '3600'),
    UA_SECRET_TTL: parseInt(process.env.INFISICAL_UA_SECRET_TTL || '0'),
    MAX_RETRIES: 3,
    RETRY_DELAY: 2,
    ADMIN_TOKEN_ENV: process.env.INFISICAL_ADMIN_TOKEN || process.env.INFISICAL_TOKEN || '',
};

// ============================================================================
// UA Credentials and State
// ============================================================================
// UA credentials
export let UA_CLIENT_ID = process.env.INFISICAL_UA_CLIENT_ID || process.env.INFISICAL_CLIENT_ID || '';
export let UA_CLIENT_SECRET = process.env.INFISICAL_UA_CLIENT_SECRET || process.env.INFISICAL_CLIENT_SECRET || '';

// UA credential file
export const UA_CRED_FILE_DEFAULT = join(SCRIPT_DIR, `.${config.IDENTITY_NAME}.ua.env`);
export const UA_CRED_FILE = process.env.INFISICAL_UA_CRED_FILE || UA_CRED_FILE_DEFAULT;

// State variables
export let HAVE_ADMIN = false;
export let ADMIN_TOKEN = '';
export let ACCESS_TOKEN = '';
export let ORG_ID = '';
export let PROJECT_ID = '';
export let IDENTITY_ID = '';

// ============================================================================
// UA Credential Helpers
// ============================================================================
export async function loadUACredsFromFile() {
    if (await fileExists(UA_CRED_FILE)) {
        import('./utils.mjs').then(({ log }) => {
            log.info(`Loading Universal Auth credentials from ${UA_CRED_FILE}`);
        });

        const content = await readFile(UA_CRED_FILE, 'utf-8');
        const lines = content.split('\n');

        for (const line of lines) {
            if (line.startsWith('#') || !line.includes('=')) continue;

            const [key, ...valueParts] = line.split('=');
            const value = valueParts.join('=');

            switch (key) {
                case 'INFISICAL_CLIENT_ID':
                    if (!UA_CLIENT_ID) UA_CLIENT_ID = value;
                    break;
                case 'INFISICAL_CLIENT_SECRET':
                    if (!UA_CLIENT_SECRET) UA_CLIENT_SECRET = value;
                    break;
                case 'INFISICAL_ORG_ID':
                    if (!ORG_ID) ORG_ID = value;
                    break;
                case 'INFISICAL_PROJECT_ID':
                    if (!PROJECT_ID) PROJECT_ID = value;
                    break;
                case 'INFISICAL_IDENTITY_ID':
                    if (!IDENTITY_ID) IDENTITY_ID = value;
                    break;
            }
        }
    }
}

export async function loadUASecretOnly() {
    if (!UA_CLIENT_SECRET && await fileExists(UA_CRED_FILE)) {
        const content = await readFile(UA_CRED_FILE, 'utf-8');
        const match = content.match(/^INFISICAL_CLIENT_SECRET=(.*)$/m);
        if (match) {
            UA_CLIENT_SECRET = match[1];
        }
    }
}

export async function saveUACredsToFile(clientId, clientSecret, orgId, projectId, identityId) {
    const lines = [
        `# Generated by ${SCRIPT_CONFIG.SCRIPT_NAME} on ${new Date().toISOString()}`,
        `# Universal Auth credentials + stable IDs for identity: ${config.IDENTITY_NAME}`
    ];

    if (clientId) lines.push(`INFISICAL_CLIENT_ID=${clientId}`);
    if (clientSecret) lines.push(`INFISICAL_CLIENT_SECRET=${clientSecret}`);
    if (orgId) lines.push(`INFISICAL_ORG_ID=${orgId}`);
    if (projectId) lines.push(`INFISICAL_PROJECT_ID=${projectId}`);
    if (identityId) lines.push(`INFISICAL_IDENTITY_ID=${identityId}`);

    const content = lines.join('\n') + '\n';

    await writeFile(UA_CRED_FILE, content, { mode: 0o600 });
    import('./utils.mjs').then(({ log }) => {
        log.success(`Saved UA creds and IDs to ${UA_CRED_FILE}`);
    });
}

// ============================================================================
// Utility Functions
// ============================================================================
export async function fileExists(path) {
    try {
        await access(path, constants.F_OK);
        return true;
    } catch {
        return false;
    }
}

export async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}