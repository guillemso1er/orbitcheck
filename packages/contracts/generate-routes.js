#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';

// Load OpenAPI schema
const openapiPath = path.join(process.cwd(), 'openapi.yaml');
const openapiDoc = yaml.load(fs.readFileSync(openapiPath, 'utf8'));

// Extract paths and generate route constants
const paths = openapiDoc.paths;
const routeGroups = {};
const dashboardGroups = ['api-keys', 'webhooks', 'data', 'auth', '/auth/register', '/auth/login'];

// Group routes by their first path segment
Object.entries(paths).forEach(([path, methods]) => {
    // Remove leading slash and split into segments
    const segments = path.replace(/^\//, '').split('/');
    const firstSegment = segments[0];

    if (!routeGroups[firstSegment]) {
        routeGroups[firstSegment] = {};
    }

    // Process each method
    Object.entries(methods).forEach(([method, methodConfig]) => {
        const operationId = methodConfig.operationId || `${method}_${path.replace(/\//g, '_').replace(/^\//, '')}`;
        const summary = methodConfig.summary || operationId;

        // Create a clean constant name
        const constantName = summary
            .replace(/[^a-zA-Z0-9]/g, '_')
            .replace(/_+/g, '_')
            .toUpperCase()
            .replace(/^_/, '')
            .replace(/_$/, '');

        // Store the route info with v1 prefix for non-dashboard routes if not already present
        const fullPath = dashboardGroups.includes(firstSegment) ? path : (path.startsWith('/v1') ? path : `/v1${path}`);
        routeGroups[firstSegment][constantName] = {
            path: fullPath,
            method: method.toUpperCase(),
            operationId: operationId,
            summary: summary
        };
    });
});

// Generate TypeScript route constants
const generateRouteConstants = () => {
    let output = `/**
 * Auto-generated route constants from OpenAPI schema
 * Generated at: ${new Date().toISOString()}
 * Do not edit this file manually - run generate-routes.js to update
 */

`;

    // Generate DASHBOARD_ROUTES (for dashboard-specific endpoints)
    const dashboardGroups = ['api-keys', 'webhooks', 'data', 'auth'];
    const dashboardRoutes = {};
    Object.entries(routeGroups).forEach(([group, routes]) => {
        if (dashboardGroups.includes(group)) {
            Object.entries(routes).forEach(([constant, route]) => {
                const cleanConstant = constant.replace(/_GET|_POST|_PUT|_DELETE|_PATCH/, '');
                dashboardRoutes[cleanConstant] = route.path;
            });
        }
    });

    if (Object.keys(dashboardRoutes).length > 0) {
        output += `export const DASHBOARD_ROUTES = {\n`;
        Object.entries(dashboardRoutes).forEach(([constant, path]) => {
            output += `  ${constant}: '${path}',\n`;
        });
        output += `} as const;\n\n`;
    }

    // Generate API_V1_ROUTES (for API endpoints)
    output += `// API routes (with v1 prefix)\n`;
    output += `export const API_V1_ROUTES = {\n`;

    Object.entries(routeGroups).forEach(([group, routes]) => {
        if (!dashboardGroups.includes(group)) {
            output += `  ${group.toUpperCase()}: {\n`;

            Object.entries(routes).forEach(([constant, route]) => {
                const cleanConstant = constant.replace(/_GET|_POST|_PUT|_DELETE|_PATCH/, '');
                output += `    ${cleanConstant}: '${route.path}',\n`;
            });

            output += `  },\n`;
        }
    });

    output += `} as const;\n\n`;


    return output;
};

// Generate the route constants
const routeConstants = generateRouteConstants();

// Write to routes.ts
const routesPath = path.join(process.cwd(), 'src', 'routes.ts');
fs.writeFileSync(routesPath, routeConstants);

console.log('✅ Route constants generated successfully!');
console.log(`📁 Updated: ${routesPath}`);
console.log(`🔧 Found ${Object.keys(routeGroups).length} route groups`);