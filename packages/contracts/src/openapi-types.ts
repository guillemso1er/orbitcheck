/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new user
         * @description Creates a new user account with default project and API key
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticates a user and returns JWT token
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API keys
         * @description Retrieves API keys for the authenticated project
         */
        get: operations["listApiKeys"];
        put?: never;
        /**
         * Create API key
         * @description Generates a new API key for the authenticated project
         */
        post: operations["createApiKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke API key
         * @description Revokes an API key by setting its status to revoked
         */
        delete: operations["revokeApiKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validate/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate email address
         * @description Performs comprehensive email validation including format, MX records, and disposable detection
         */
        post: operations["validateEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validate/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate phone number
         * @description Validates a phone number and returns it in E.164 format
         */
        post: operations["validatePhone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validate/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate address
         * @description Validates a physical address and normalizes it
         */
        post: operations["validateAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validate/tax-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate tax ID
         * @description Validates a tax identification number
         */
        post: operations["validateTaxId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verify/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify phone OTP
         * @description Verifies OTP sent to phone number
         */
        post: operations["verifyPhoneOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedupe/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deduplicate customer
         * @description Searches for existing customers using deterministic and fuzzy matching
         */
        post: operations["dedupeCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedupe/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deduplicate address
         * @description Searches for existing addresses using deterministic and fuzzy matching
         */
        post: operations["dedupeAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedupe/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Merge deduplicated records
         * @description Merges multiple customer or address records into a canonical one
         */
        post: operations["mergeDeduplicated"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Evaluate order for risk and rules
         * @description Evaluates an order for deduplication, validation, and applies business rules
         */
        post: operations["evaluateOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get event logs
         * @description Retrieves event logs for the project with optional filters
         */
        get: operations["getLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get usage statistics
         * @description Retrieves usage statistics for the project
         */
        get: operations["getUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available rules
         * @description Returns a list of all available validation and risk assessment rules
         */
        get: operations["getRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get reason code catalog
         * @description Returns a comprehensive list of all possible reason codes
         */
        get: operations["getReasonCodeCatalog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register custom rules
         * @description Registers custom business rules for the project
         */
        post: operations["registerCustomRules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test webhook
         * @description Sends a sample payload to the provided webhook URL
         */
        post: operations["testWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error?: {
                /** @description Error code */
                code?: string;
                /** @description Error message */
                message?: string;
            };
            /** @description Request identifier */
            request_id?: string;
        };
        ApiKey: {
            /** @description API key ID */
            id?: string;
            /** @description API key prefix (first 6 characters) */
            prefix?: string;
            /**
             * @description API key status
             * @enum {string}
             */
            status?: "active" | "revoked";
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Last used timestamp
             */
            last_used_at?: string | null;
        };
        Address: {
            /** @description Street address line 1 */
            line1?: string;
            /** @description Street address line 2 */
            line2?: string;
            /** @description City */
            city?: string;
            /** @description State or province */
            state?: string;
            /** @description Postal code */
            postal_code?: string;
            /** @description Two-letter country code */
            country?: string;
            /** @description Latitude */
            lat?: number | null;
            /** @description Longitude */
            lng?: number | null;
        };
        Customer: {
            /** @description Customer email */
            email?: string;
            /** @description Customer phone */
            phone?: string;
            /** @description Customer first name */
            first_name?: string;
            /** @description Customer last name */
            last_name?: string;
        };
        CustomerMatch: {
            /** @description Customer ID */
            id?: string;
            /** @description Similarity score (0-1) */
            similarity_score?: number;
            /**
             * @description Type of match
             * @enum {string}
             */
            match_type?: "exact_email" | "exact_phone" | "fuzzy_name";
            data?: components["schemas"]["Customer"];
        };
        AddressMatch: {
            /** @description Address ID */
            id?: string;
            /** @description Similarity score (0-1) */
            similarity_score?: number;
            /**
             * @description Type of match
             * @enum {string}
             */
            match_type?: "exact_address" | "exact_postal" | "fuzzy_address";
            data?: components["schemas"]["Address"];
        };
        DedupeResult: {
            matches?: {
                id?: string;
                similarity_score?: number;
                match_type?: string;
                data?: Record<string, never>;
            }[];
            /** @enum {string} */
            suggested_action?: "create_new" | "merge_with" | "review";
            canonical_id?: string | null;
        };
        ValidationResult: {
            /** @description Whether the validation passed */
            valid?: boolean;
            /** @description List of reason codes */
            reason_codes?: string[];
            /** @description Whether the result is disposable (for email) */
            disposable?: boolean;
        };
        AddressValidationResult: {
            /** @description Whether the address is valid */
            valid?: boolean;
            /** @description List of reason codes */
            reason_codes?: string[];
            /** @description Whether the address is a P.O. Box */
            po_box?: boolean;
            /** @description Whether postal code matches city */
            postal_city_match?: boolean;
            /** @description Whether the address is within bounds */
            in_bounds?: boolean;
        };
        LogEntry: {
            /** @description Log entry ID */
            id?: string;
            /** @description Log entry type */
            type?: string;
            /** @description API endpoint */
            endpoint?: string;
            /** @description List of reason codes */
            reason_codes?: string[];
            /** @description HTTP status code */
            status?: number;
            /** @description Additional metadata */
            meta?: Record<string, never>;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
        };
        Rule: {
            /** @description Rule ID */
            id?: string;
            /** @description Rule name */
            name?: string;
            /** @description Rule description */
            description?: string;
            /** @description Rule category */
            category?: string;
            /** @description Whether the rule is enabled */
            enabled?: boolean;
        };
        ReasonCode: {
            /** @description Reason code */
            code?: string;
            /** @description Description of the reason code */
            description?: string;
            /** @description Category of the reason code */
            category?: string;
            /**
             * @description Severity level
             * @enum {string}
             */
            severity?: "low" | "medium" | "high";
        };
        CustomRule: {
            /** @description Rule ID */
            id?: string;
            /** @description Rule name */
            name?: string;
            /** @description Rule description */
            description?: string;
            /** @description Reason code to trigger */
            reason_code?: string;
            /**
             * @description Severity level
             * @enum {string}
             */
            severity?: "low" | "medium" | "high";
            /** @description Whether the rule is enabled */
            enabled?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description User email address
                     */
                    email: string;
                    /** @description User password (minimum 8 characters) */
                    password: string;
                };
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description JWT authentication token */
                        token?: string;
                        user?: {
                            /** @description User ID */
                            id?: string;
                            /** @description User email */
                            email?: string;
                        };
                        /** @description Request identifier */
                        request_id?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description User email address
                     */
                    email: string;
                    /** @description User password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description JWT authentication token */
                        token?: string;
                        user?: {
                            /** @description User ID */
                            id?: string;
                            /** @description User email */
                            email?: string;
                        };
                        /** @description Request identifier */
                        request_id?: string;
                    };
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listApiKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API keys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ApiKey"][];
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Optional name for the API key */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description API key created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description API key ID */
                        id?: string;
                        /** @description API key prefix (first 6 characters) */
                        prefix?: string;
                        /** @description The full API key (shown only once) */
                        full_key?: string;
                        /** @description API key status */
                        status?: string;
                        /**
                         * Format: date-time
                         * @description Creation timestamp
                         */
                        created_at?: string;
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    revokeApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the API key to revoke */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key revoked successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description API key ID */
                        id?: string;
                        /** @description API key status */
                        status?: string;
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    validateEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The email address to validate */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Email validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether the email is valid */
                        valid?: boolean;
                        /** @description Normalized email address */
                        normalized?: string;
                        /** @description Whether the email is from a disposable service */
                        disposable?: boolean;
                        /** @description Whether MX records were found */
                        mx_found?: boolean;
                        /** @description List of validation reason codes */
                        reason_codes?: string[];
                        request_id?: string;
                        /** @description Cache TTL in seconds */
                        ttl_seconds?: number;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    validatePhone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The phone number to validate */
                    phone: string;
                    /** @description Optional two-letter country code hint */
                    country?: string;
                    /**
                     * @description Request OTP for verification
                     * @default false
                     */
                    request_otp?: boolean;
                };
            };
        };
        responses: {
            /** @description Phone validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether the phone number is valid */
                        valid?: boolean;
                        /** @description Phone number in E.164 format */
                        e164?: string;
                        /** @description Country code */
                        country?: string | null;
                        /** @description List of validation reason codes */
                        reason_codes?: string[];
                        request_id?: string;
                        /** @description Cache TTL in seconds */
                        ttl_seconds?: number;
                        /** @description Twilio Verify SID for OTP verification */
                        verification_sid?: string | null;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    validateAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    address: {
                        /** @description Street address line 1 */
                        line1: string;
                        /** @description Street address line 2 */
                        line2?: string;
                        /** @description City */
                        city: string;
                        /** @description State or province */
                        state?: string;
                        /** @description Postal code */
                        postal_code: string;
                        /** @description Two-letter country code */
                        country: string;
                    };
                };
            };
        };
        responses: {
            /** @description Address validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether the address is valid */
                        valid?: boolean;
                        normalized?: components["schemas"]["Address"];
                        geo?: {
                            /** @description Latitude */
                            lat?: number;
                            /** @description Longitude */
                            lng?: number;
                            /** @description Geocoding confidence score */
                            confidence?: number;
                        } | null;
                        /** @description Whether the address is a P.O. Box */
                        po_box?: boolean;
                        /** @description Whether postal code matches city */
                        postal_city_match?: boolean;
                        /** @description List of validation reason codes */
                        reason_codes?: string[];
                        request_id?: string;
                        /** @description Cache TTL in seconds */
                        ttl_seconds?: number;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    validateTaxId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Type of tax ID (e.g., "vat", "euvat", "br_cnpj") */
                    type: string;
                    /** @description The tax ID number */
                    value: string;
                    /** @description Optional two-letter country code */
                    country?: string;
                };
            };
        };
        responses: {
            /** @description Tax ID validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether the tax ID is valid */
                        valid?: boolean;
                        /** @description Normalized tax ID */
                        normalized?: string;
                        /** @description List of validation reason codes */
                        reason_codes?: string[];
                        request_id?: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    verifyPhoneOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Twilio Verify SID from validation response */
                    verification_sid: string;
                    /** @description OTP code entered by user */
                    code: string;
                };
            };
        };
        responses: {
            /** @description OTP verification result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether OTP is valid */
                        valid?: boolean;
                        /** @description List of reason codes */
                        reason_codes?: string[];
                        request_id?: string;
                    };
                };
            };
            /** @description Invalid OTP */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dedupeCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Customer email */
                    email: string;
                    /** @description Customer phone */
                    phone?: string;
                    /** @description Customer first name */
                    first_name: string;
                    /** @description Customer last name */
                    last_name: string;
                };
            };
        };
        responses: {
            /** @description Deduplication results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        matches?: components["schemas"]["CustomerMatch"][];
                        /**
                         * @description Suggested action
                         * @enum {string}
                         */
                        suggested_action?: "create_new" | "merge_with" | "review";
                        /** @description Suggested canonical ID */
                        canonical_id?: string | null;
                        request_id?: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dedupeAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Street address line 1 */
                    line1: string;
                    /** @description Street address line 2 */
                    line2?: string;
                    /** @description City */
                    city: string;
                    /** @description State or province */
                    state?: string;
                    /** @description Postal code */
                    postal_code: string;
                    /** @description Two-letter country code */
                    country: string;
                };
            };
        };
        responses: {
            /** @description Deduplication results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        matches?: components["schemas"]["AddressMatch"][];
                        /**
                         * @description Suggested action
                         * @enum {string}
                         */
                        suggested_action?: "create_new" | "merge_with" | "review";
                        /** @description Suggested canonical ID */
                        canonical_id?: string | null;
                        request_id?: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    mergeDeduplicated: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Type of records to merge
                     * @enum {string}
                     */
                    type: "customer" | "address";
                    /** @description IDs to merge */
                    ids: string[];
                    /** @description ID of canonical record to keep */
                    canonical_id: string;
                };
            };
        };
        responses: {
            /** @description Merge result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether merge was successful */
                        success?: boolean;
                        /** @description Number of records merged */
                        merged_count?: number;
                        /** @description ID of canonical record */
                        canonical_id?: string;
                        request_id?: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    evaluateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Unique order identifier */
                    order_id: string;
                    customer: components["schemas"]["Customer"];
                    shipping_address: components["schemas"]["Address"];
                    /** @description Order total amount */
                    total_amount: number;
                    /** @description Currency code (e.g., USD, EUR) */
                    currency: string;
                    /**
                     * @description Payment method
                     * @enum {string}
                     */
                    payment_method?: "card" | "cod" | "bank_transfer";
                };
            };
        };
        responses: {
            /** @description Order evaluation results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Order ID */
                        order_id?: string;
                        /** @description Risk score (0-100) */
                        risk_score?: number;
                        /**
                         * @description Recommended action
                         * @enum {string}
                         */
                        action?: "approve" | "hold" | "block";
                        /** @description Order tags */
                        tags?: string[];
                        /** @description List of reason codes */
                        reason_codes?: string[];
                        customer_dedupe?: components["schemas"]["DedupeResult"];
                        address_dedupe?: components["schemas"]["DedupeResult"];
                        validations?: {
                            email?: components["schemas"]["ValidationResult"];
                            phone?: components["schemas"]["ValidationResult"];
                            address?: components["schemas"]["AddressValidationResult"];
                        };
                        request_id?: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getLogs: {
        parameters: {
            query?: {
                /** @description Filter by exact reason code */
                reason_code?: string;
                /** @description Filter by exact endpoint */
                endpoint?: string;
                /** @description Filter by HTTP status code */
                status?: number;
                /** @description Number of logs to return */
                limit?: number;
                /** @description Offset for pagination */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of log entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["LogEntry"][];
                        /** @description Next offset for pagination */
                        next_cursor?: string | null;
                        /** @description Total number of matching logs */
                        total_count?: number;
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUsage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Time period
                         * @example month
                         */
                        period?: string;
                        totals?: {
                            /** @description Total validations */
                            validations?: number;
                            /** @description Total orders */
                            orders?: number;
                        };
                        by_day?: {
                            /**
                             * Format: date
                             * @description Date
                             */
                            date?: string;
                            /** @description Validations for this day */
                            validations?: number;
                            /** @description Orders for this day */
                            orders?: number;
                        }[];
                        top_reason_codes?: {
                            /** @description Reason code */
                            code?: string;
                            /** @description Count */
                            count?: number;
                        }[];
                        /** @description Cache hit ratio percentage */
                        cache_hit_ratio?: number;
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getRules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of rules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rules?: components["schemas"]["Rule"][];
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getReasonCodeCatalog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of reason codes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        reason_codes?: components["schemas"]["ReasonCode"][];
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    registerCustomRules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    rules?: components["schemas"]["CustomRule"][];
                };
            };
        };
        responses: {
            /** @description Rules registered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Success message */
                        message?: string;
                        /** @description List of registered rule IDs */
                        registered_rules?: string[];
                        request_id?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    testWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: uri
                     * @description The webhook URL to send the payload to
                     */
                    url: string;
                    /**
                     * @description Type of sample payload to send
                     * @enum {string}
                     */
                    payload_type: "validation" | "order" | "custom";
                    /** @description Custom payload if payload_type is "custom" */
                    custom_payload?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Webhook test result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description URL sent to */
                        sent_to?: string;
                        /** @description Payload sent */
                        payload?: {
                            [key: string]: unknown;
                        };
                        response?: {
                            /** @description HTTP status code */
                            status?: number;
                            /** @description HTTP status text */
                            status_text?: string;
                            /** @description Response headers */
                            headers?: Record<string, never>;
                            /** @description Response body */
                            body?: string;
                        };
                        request_id?: string;
                    };
                };
            };
            /** @description Invalid URL or payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Failed to send request */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
