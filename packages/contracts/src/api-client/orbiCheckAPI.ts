/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * OrbiCheck API
 * API for validation, deduplication, and risk assessment services
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type ErrorError = {
  /** Error code */
  code?: string;
  /** Error message */
  message?: string;
};

export interface Error {
  error?: ErrorError;
  /** Request identifier */
  request_id?: string;
}

/**
 * API key status
 */
export type ApiKeyStatus = typeof ApiKeyStatus[keyof typeof ApiKeyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiKeyStatus = {
  active: 'active',
  revoked: 'revoked',
} as const;

export interface ApiKey {
  /** API key ID */
  id?: string;
  /** API key prefix (first 6 characters) */
  prefix?: string;
  /** API key status */
  status?: ApiKeyStatus;
  /** Creation timestamp */
  created_at?: string;
  /**
   * Last used timestamp
   * @nullable
   */
  last_used_at?: string | null;
}

/**
 * Webhook status
 */
export type WebhookStatus = typeof WebhookStatus[keyof typeof WebhookStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebhookStatus = {
  active: 'active',
  inactive: 'inactive',
  deleted: 'deleted',
} as const;

export interface Webhook {
  /** Webhook ID */
  id?: string;
  /** Webhook URL */
  url?: string;
  /** Events this webhook is subscribed to */
  events?: string[];
  /** Webhook status */
  status?: WebhookStatus;
  /** Creation timestamp */
  created_at?: string;
  /**
   * Last time webhook was fired
   * @nullable
   */
  last_fired_at?: string | null;
}

export interface Address {
  /** Street address line 1 */
  line1?: string;
  /** Street address line 2 */
  line2?: string;
  /** City */
  city?: string;
  /** State or province */
  state?: string;
  /** Postal code */
  postal_code?: string;
  /** Two-letter country code */
  country?: string;
  /**
   * Latitude
   * @nullable
   */
  lat?: number | null;
  /**
   * Longitude
   * @nullable
   */
  lng?: number | null;
}

export interface Customer {
  /** Customer email */
  email?: string;
  /** Customer phone */
  phone?: string;
  /** Customer first name */
  first_name?: string;
  /** Customer last name */
  last_name?: string;
}

/**
 * Type of match
 */
export type CustomerMatchMatchType = typeof CustomerMatchMatchType[keyof typeof CustomerMatchMatchType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerMatchMatchType = {
  exact_email: 'exact_email',
  exact_phone: 'exact_phone',
  fuzzy_name: 'fuzzy_name',
} as const;

export interface CustomerMatch {
  /** Customer ID */
  id?: string;
  /** Similarity score (0-1) */
  similarity_score?: number;
  /** Type of match */
  match_type?: CustomerMatchMatchType;
  data?: Customer;
}

/**
 * Type of match
 */
export type AddressMatchMatchType = typeof AddressMatchMatchType[keyof typeof AddressMatchMatchType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddressMatchMatchType = {
  exact_address: 'exact_address',
  exact_postal: 'exact_postal',
  fuzzy_address: 'fuzzy_address',
} as const;

export interface AddressMatch {
  /** Address ID */
  id?: string;
  /** Similarity score (0-1) */
  similarity_score?: number;
  /** Type of match */
  match_type?: AddressMatchMatchType;
  data?: Address;
}

export type DedupeResultMatchesItemData = { [key: string]: unknown };

export type DedupeResultMatchesItem = {
  id?: string;
  similarity_score?: number;
  match_type?: string;
  data?: DedupeResultMatchesItemData;
};

export type DedupeResultSuggestedAction = typeof DedupeResultSuggestedAction[keyof typeof DedupeResultSuggestedAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedupeResultSuggestedAction = {
  create_new: 'create_new',
  merge_with: 'merge_with',
  review: 'review',
} as const;

export interface DedupeResult {
  matches?: DedupeResultMatchesItem[];
  suggested_action?: DedupeResultSuggestedAction;
  /** @nullable */
  canonical_id?: string | null;
}

export interface ValidationResult {
  /** Whether the validation passed */
  valid?: boolean;
  /** List of reason codes */
  reason_codes?: string[];
  /** Whether the result is disposable (for email) */
  disposable?: boolean;
}

export interface AddressValidationResult {
  /** Whether the address is valid */
  valid?: boolean;
  /** List of reason codes */
  reason_codes?: string[];
  /** Whether the address is a P.O. Box */
  po_box?: boolean;
  /** Whether postal code matches city */
  postal_city_match?: boolean;
  /** Whether the address is within bounds */
  in_bounds?: boolean;
}

/**
 * Additional metadata
 */
export type LogEntryMeta = { [key: string]: unknown };

export interface LogEntry {
  /** Log entry ID */
  id?: string;
  /** Log entry type */
  type?: string;
  /** API endpoint */
  endpoint?: string;
  /** List of reason codes */
  reason_codes?: string[];
  /** HTTP status code */
  status?: number;
  /** Additional metadata */
  meta?: LogEntryMeta;
  /** Creation timestamp */
  created_at?: string;
}

export interface Rule {
  /** Rule ID */
  id?: string;
  /** Rule name */
  name?: string;
  /** Rule description */
  description?: string;
  /** Rule category */
  category?: string;
  /** Whether the rule is enabled */
  enabled?: boolean;
}

/**
 * Severity level
 */
export type ReasonCodeSeverity = typeof ReasonCodeSeverity[keyof typeof ReasonCodeSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReasonCodeSeverity = {
  low: 'low',
  medium: 'medium',
  high: 'high',
} as const;

export interface ReasonCode {
  /** Reason code */
  code?: string;
  /** Description of the reason code */
  description?: string;
  /** Category of the reason code */
  category?: string;
  /** Severity level */
  severity?: ReasonCodeSeverity;
}

/**
 * Severity level
 */
export type ErrorCodeSeverity = typeof ErrorCodeSeverity[keyof typeof ErrorCodeSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorCodeSeverity = {
  low: 'low',
  medium: 'medium',
  high: 'high',
} as const;

export interface ErrorCode {
  /** Error code */
  code?: string;
  /** Description of the error code */
  description?: string;
  /** Category of the error code */
  category?: string;
  /** Severity level */
  severity?: ErrorCodeSeverity;
}

/**
 * Severity level
 */
export type CustomRuleSeverity = typeof CustomRuleSeverity[keyof typeof CustomRuleSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomRuleSeverity = {
  low: 'low',
  medium: 'medium',
  high: 'high',
} as const;

export interface CustomRule {
  /** Rule ID */
  id?: string;
  /** Rule name */
  name?: string;
  /** Rule description */
  description?: string;
  /** Reason code to trigger */
  reason_code?: string;
  /** Severity level */
  severity?: CustomRuleSeverity;
  /** Whether the rule is enabled */
  enabled?: boolean;
}

export type RegisterUserBody = {
  /** User email address */
  email: string;
  /**
   * User password (minimum 8 characters)
   * @minLength 8
   */
  password: string;
};

export type RegisterUser201User = {
  /** User ID */
  id?: string;
  /** User email */
  email?: string;
};

export type RegisterUser201 = {
  /** JWT authentication token */
  token?: string;
  user?: RegisterUser201User;
  /** Request identifier */
  request_id?: string;
};

export type LoginUserBody = {
  /** User email address */
  email: string;
  /** User password */
  password: string;
};

export type LoginUser200User = {
  /** User ID */
  id?: string;
  /** User email */
  email?: string;
};

export type LoginUser200 = {
  /** JWT authentication token */
  token?: string;
  user?: LoginUser200User;
  /** Request identifier */
  request_id?: string;
};

export type LogoutUser200 = {
  /** Success message */
  message?: string;
};

export type ListApiKeys200 = {
  data?: ApiKey[];
  request_id?: string;
};

export type CreateApiKeyBody = {
  /** Optional name for the API key */
  name?: string;
};

export type CreateApiKey201 = {
  /** API key ID */
  id?: string;
  /** API key prefix (first 6 characters) */
  prefix?: string;
  /** The full API key (shown only once) */
  full_key?: string;
  /** API key status */
  status?: string;
  /** Creation timestamp */
  created_at?: string;
  request_id?: string;
};

export type RevokeApiKey200 = {
  /** API key ID */
  id?: string;
  /** API key status */
  status?: string;
  request_id?: string;
};

export type NormalizeAddressBodyAddress = {
  line1: string;
  line2?: string;
  city: string;
  state?: string;
  postal_code: string;
  /**
   * @minLength 2
   * @maxLength 2
   */
  country: string;
};

export type NormalizeAddressBody = {
  address: NormalizeAddressBodyAddress;
};

export type NormalizeAddress200Normalized = {
  line1?: string;
  line2?: string;
  city?: string;
  state?: string;
  postal_code?: string;
  country?: string;
};

export type NormalizeAddress200 = {
  normalized?: NormalizeAddress200Normalized;
  request_id?: string;
};

export type ValidateEmailBody = {
  /** The email address to validate */
  email: string;
};

export type ValidateEmail200 = {
  /** Whether the email is valid */
  valid?: boolean;
  /** Normalized email address */
  normalized?: string;
  /** Whether the email is from a disposable service */
  disposable?: boolean;
  /** Whether MX records were found */
  mx_found?: boolean;
  /** List of validation reason codes */
  reason_codes?: string[];
  request_id?: string;
  /** Cache TTL in seconds */
  ttl_seconds?: number;
};

export type ValidatePhoneBody = {
  /** The phone number to validate */
  phone: string;
  /** Optional two-letter country code hint */
  country?: string;
  /** Request OTP for verification */
  request_otp?: boolean;
};

export type ValidatePhone200 = {
  /** Whether the phone number is valid */
  valid?: boolean;
  /** Phone number in E.164 format */
  e164?: string;
  /**
   * Country code
   * @nullable
   */
  country?: string | null;
  /** List of validation reason codes */
  reason_codes?: string[];
  request_id?: string;
  /** Cache TTL in seconds */
  ttl_seconds?: number;
  /**
   * Twilio Verify SID for OTP verification
   * @nullable
   */
  verification_sid?: string | null;
};

export type ValidateAddressBodyAddress = {
  /** Street address line 1 */
  line1: string;
  /** Street address line 2 */
  line2?: string;
  /** City */
  city: string;
  /** State or province */
  state?: string;
  /** Postal code */
  postal_code: string;
  /**
   * Two-letter country code
   * @minLength 2
   * @maxLength 2
   */
  country: string;
};

export type ValidateAddressBody = {
  address: ValidateAddressBodyAddress;
};

/**
 * @nullable
 */
export type ValidateAddress200Geo = {
  /** Latitude */
  lat?: number;
  /** Longitude */
  lng?: number;
  /** Geocoding confidence score */
  confidence?: number;
} | null;

export type ValidateAddress200 = {
  /** Whether the address is valid */
  valid?: boolean;
  normalized?: Address;
  /** @nullable */
  geo?: ValidateAddress200Geo;
  /** Whether the address is a P.O. Box */
  po_box?: boolean;
  /** Whether postal code matches city */
  postal_city_match?: boolean;
  /** List of validation reason codes */
  reason_codes?: string[];
  request_id?: string;
  /** Cache TTL in seconds */
  ttl_seconds?: number;
};

export type ValidateTaxIdBody = {
  /** Type of tax ID (e.g., "vat", "euvat", "br_cnpj") */
  type: string;
  /** The tax ID number */
  value: string;
  /** Optional two-letter country code */
  country?: string;
};

export type ValidateTaxId200 = {
  /** Whether the tax ID is valid */
  valid?: boolean;
  /** Normalized tax ID */
  normalized?: string;
  /** List of validation reason codes */
  reason_codes?: string[];
  request_id?: string;
};

export type ValidateNameBody = {
  /** The name to validate and normalize */
  name: string;
};

export type ValidateName200 = {
  /** Whether the name is valid */
  valid?: boolean;
  /** Normalized name */
  normalized?: string;
  /** List of validation reason codes */
  reason_codes?: string[];
  request_id?: string;
};

export type VerifyPhoneOtpBody = {
  /** Twilio Verify SID from validation response */
  verification_sid: string;
  /** OTP code entered by user */
  code: string;
};

export type VerifyPhoneOtp200 = {
  /** Whether OTP is valid */
  valid?: boolean;
  /** List of reason codes */
  reason_codes?: string[];
  request_id?: string;
};

export type DedupeCustomerBody = {
  /** Customer email */
  email: string;
  /** Customer phone */
  phone?: string;
  /** Customer first name */
  first_name: string;
  /** Customer last name */
  last_name: string;
};

/**
 * Suggested action
 */
export type DedupeCustomer200SuggestedAction = typeof DedupeCustomer200SuggestedAction[keyof typeof DedupeCustomer200SuggestedAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedupeCustomer200SuggestedAction = {
  create_new: 'create_new',
  merge_with: 'merge_with',
  review: 'review',
} as const;

export type DedupeCustomer200 = {
  matches?: CustomerMatch[];
  /** Suggested action */
  suggested_action?: DedupeCustomer200SuggestedAction;
  /**
   * Suggested canonical ID
   * @nullable
   */
  canonical_id?: string | null;
  request_id?: string;
};

export type DedupeAddressBody = {
  /** Street address line 1 */
  line1: string;
  /** Street address line 2 */
  line2?: string;
  /** City */
  city: string;
  /** State or province */
  state?: string;
  /** Postal code */
  postal_code: string;
  /**
   * Two-letter country code
   * @minLength 2
   * @maxLength 2
   */
  country: string;
};

/**
 * Suggested action
 */
export type DedupeAddress200SuggestedAction = typeof DedupeAddress200SuggestedAction[keyof typeof DedupeAddress200SuggestedAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedupeAddress200SuggestedAction = {
  create_new: 'create_new',
  merge_with: 'merge_with',
  review: 'review',
} as const;

export type DedupeAddress200 = {
  matches?: AddressMatch[];
  /** Suggested action */
  suggested_action?: DedupeAddress200SuggestedAction;
  /**
   * Suggested canonical ID
   * @nullable
   */
  canonical_id?: string | null;
  request_id?: string;
};

/**
 * Type of records to merge
 */
export type MergeDeduplicatedBodyType = typeof MergeDeduplicatedBodyType[keyof typeof MergeDeduplicatedBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MergeDeduplicatedBodyType = {
  customer: 'customer',
  address: 'address',
} as const;

export type MergeDeduplicatedBody = {
  /** Type of records to merge */
  type: MergeDeduplicatedBodyType;
  /** IDs to merge */
  ids: string[];
  /** ID of canonical record to keep */
  canonical_id: string;
};

export type MergeDeduplicated200 = {
  /** Whether merge was successful */
  success?: boolean;
  /** Number of records merged */
  merged_count?: number;
  /** ID of canonical record */
  canonical_id?: string;
  request_id?: string;
};

/**
 * Payment method
 */
export type EvaluateOrderBodyPaymentMethod = typeof EvaluateOrderBodyPaymentMethod[keyof typeof EvaluateOrderBodyPaymentMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EvaluateOrderBodyPaymentMethod = {
  card: 'card',
  cod: 'cod',
  bank_transfer: 'bank_transfer',
} as const;

export type EvaluateOrderBody = {
  /** Unique order identifier */
  order_id: string;
  customer: Customer;
  shipping_address: Address;
  /** Order total amount */
  total_amount: number;
  /**
   * Currency code (e.g., USD, EUR)
   * @pattern ^[A-Z]{3}$
   */
  currency: string;
  /** Payment method */
  payment_method?: EvaluateOrderBodyPaymentMethod;
};

/**
 * Recommended action
 */
export type EvaluateOrder200Action = typeof EvaluateOrder200Action[keyof typeof EvaluateOrder200Action];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EvaluateOrder200Action = {
  approve: 'approve',
  hold: 'hold',
  block: 'block',
} as const;

export type EvaluateOrder200Validations = {
  email?: ValidationResult;
  phone?: ValidationResult;
  address?: AddressValidationResult;
};

export type EvaluateOrder200 = {
  /** Order ID */
  order_id?: string;
  /**
   * Risk score (0-100)
   * @minimum 0
   * @maximum 100
   */
  risk_score?: number;
  /** Recommended action */
  action?: EvaluateOrder200Action;
  /** Order tags */
  tags?: string[];
  /** List of reason codes */
  reason_codes?: string[];
  customer_dedupe?: DedupeResult;
  address_dedupe?: DedupeResult;
  validations?: EvaluateOrder200Validations;
  request_id?: string;
};

export type GetLogsParams = {
/**
 * Filter by exact reason code
 */
reason_code?: string;
/**
 * Filter by exact endpoint
 */
endpoint?: string;
/**
 * Filter by HTTP status code
 */
status?: number;
/**
 * Number of logs to return
 * @minimum 1
 * @maximum 1000
 */
limit?: number;
/**
 * Offset for pagination
 * @minimum 0
 */
offset?: number;
};

export type GetLogs200 = {
  data?: LogEntry[];
  /**
   * Next offset for pagination
   * @nullable
   */
  next_cursor?: string | null;
  /** Total number of matching logs */
  total_count?: number;
  request_id?: string;
};

export type GetUsage200Totals = {
  /** Total validations */
  validations?: number;
  /** Total orders */
  orders?: number;
};

export type GetUsage200ByDayItem = {
  /** Date */
  date?: string;
  /** Validations for this day */
  validations?: number;
  /** Orders for this day */
  orders?: number;
};

export type GetUsage200TopReasonCodesItem = {
  /** Reason code */
  code?: string;
  /** Count */
  count?: number;
};

export type GetUsage200 = {
  /** Time period */
  period?: string;
  totals?: GetUsage200Totals;
  by_day?: GetUsage200ByDayItem[];
  top_reason_codes?: GetUsage200TopReasonCodesItem[];
  /** Cache hit ratio percentage */
  cache_hit_ratio?: number;
  request_id?: string;
};

/**
 * Country-specific default settings
 */
export type GetSettings200CountryDefaults = { [key: string]: unknown };

/**
 * Formatting preferences
 */
export type GetSettings200Formatting = { [key: string]: unknown };

/**
 * Risk assessment thresholds
 */
export type GetSettings200RiskThresholds = { [key: string]: unknown };

export type GetSettings200 = {
  /** Country-specific default settings */
  country_defaults?: GetSettings200CountryDefaults;
  /** Formatting preferences */
  formatting?: GetSettings200Formatting;
  /** Risk assessment thresholds */
  risk_thresholds?: GetSettings200RiskThresholds;
  /** Request identifier */
  request_id?: string;
};

/**
 * Country-specific default settings
 */
export type UpdateSettingsBodyCountryDefaults = { [key: string]: unknown };

/**
 * Formatting preferences
 */
export type UpdateSettingsBodyFormatting = { [key: string]: unknown };

/**
 * Risk assessment thresholds
 */
export type UpdateSettingsBodyRiskThresholds = { [key: string]: unknown };

export type UpdateSettingsBody = {
  /** Country-specific default settings */
  country_defaults?: UpdateSettingsBodyCountryDefaults;
  /** Formatting preferences */
  formatting?: UpdateSettingsBodyFormatting;
  /** Risk assessment thresholds */
  risk_thresholds?: UpdateSettingsBodyRiskThresholds;
};

export type UpdateSettings200 = {
  /** Success message */
  message?: string;
  /** Request identifier */
  request_id?: string;
};

/**
 * Reason for data erasure (gdpr/ccpa)
 */
export type EraseDataBodyReason = typeof EraseDataBodyReason[keyof typeof EraseDataBodyReason];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EraseDataBodyReason = {
  gdpr: 'gdpr',
  ccpa: 'ccpa',
} as const;

export type EraseDataBody = {
  /** Reason for data erasure (gdpr/ccpa) */
  reason: EraseDataBodyReason;
};

export type EraseData202 = {
  /** Confirmation message */
  message?: string;
  /** Request identifier */
  request_id?: string;
};

export type DeleteLog200 = {
  /** Success message */
  message?: string;
  /** Request identifier */
  request_id?: string;
};

export type GetRules200 = {
  rules?: Rule[];
  request_id?: string;
};

export type GetReasonCodeCatalog200 = {
  reason_codes?: ReasonCode[];
  request_id?: string;
};

export type GetErrorCodeCatalog200 = {
  error_codes?: ErrorCode[];
  request_id?: string;
};

export type RegisterCustomRulesBody = {
  rules?: CustomRule[];
};

export type RegisterCustomRules200 = {
  /** Success message */
  message?: string;
  /** List of registered rule IDs */
  registered_rules?: string[];
  request_id?: string;
};

export type TestRulesBodyAddress = {
  line1?: string;
  line2?: string;
  city?: string;
  state?: string;
  postal_code?: string;
  country?: string;
};

export type TestRulesBody = {
  email?: string;
  phone?: string;
  address?: TestRulesBodyAddress;
  name?: string;
};

export type TestRules200ResultsEmail = {
  valid?: boolean;
  reason_codes?: string[];
  normalized?: string;
  disposable?: boolean;
};

export type TestRules200ResultsPhone = {
  valid?: boolean;
  reason_codes?: string[];
  e164?: string;
  country?: string;
};

export type TestRules200ResultsAddressNormalized = { [key: string]: unknown };

export type TestRules200ResultsAddress = {
  valid?: boolean;
  reason_codes?: string[];
  normalized?: TestRules200ResultsAddressNormalized;
  po_box?: boolean;
};

export type TestRules200ResultsName = {
  valid?: boolean;
  reason_codes?: string[];
  normalized?: string;
};

export type TestRules200Results = {
  email?: TestRules200ResultsEmail;
  phone?: TestRules200ResultsPhone;
  address?: TestRules200ResultsAddress;
  name?: TestRules200ResultsName;
};

export type TestRules200 = {
  results?: TestRules200Results;
  request_id?: string;
};

export type ListWebhooks200 = {
  data?: Webhook[];
  request_id?: string;
};

export type CreateWebhookBodyEventsItem = typeof CreateWebhookBodyEventsItem[keyof typeof CreateWebhookBodyEventsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateWebhookBodyEventsItem = {
  validation_result: 'validation_result',
  order_evaluated: 'order_evaluated',
  dedupe_completed: 'dedupe_completed',
  job_completed: 'job_completed',
} as const;

export type CreateWebhookBody = {
  /** The webhook URL to send events to */
  url: string;
  /** Events to subscribe to */
  events: CreateWebhookBodyEventsItem[];
};

export type CreateWebhook201 = {
  /** Webhook ID */
  id?: string;
  /** Webhook URL */
  url?: string;
  /** Subscribed events */
  events?: string[];
  /** Webhook secret for signature verification */
  secret?: string;
  /** Webhook status */
  status?: string;
  /** Creation timestamp */
  created_at?: string;
  request_id?: string;
};

export type DeleteWebhook200 = {
  /** Webhook ID */
  id?: string;
  /** Webhook status (deleted) */
  status?: string;
  request_id?: string;
};

/**
 * Type of sample payload to send
 */
export type TestWebhookBodyPayloadType = typeof TestWebhookBodyPayloadType[keyof typeof TestWebhookBodyPayloadType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TestWebhookBodyPayloadType = {
  validation: 'validation',
  order: 'order',
  custom: 'custom',
} as const;

/**
 * Custom payload if payload_type is "custom"
 */
export type TestWebhookBodyCustomPayload = { [key: string]: unknown };

export type TestWebhookBody = {
  /** The webhook URL to send the payload to */
  url: string;
  /** Type of sample payload to send */
  payload_type: TestWebhookBodyPayloadType;
  /** Custom payload if payload_type is "custom" */
  custom_payload?: TestWebhookBodyCustomPayload;
};

/**
 * Payload sent
 */
export type TestWebhook200Payload = { [key: string]: unknown };

/**
 * Response headers
 */
export type TestWebhook200ResponseHeaders = { [key: string]: unknown };

export type TestWebhook200Response = {
  /** HTTP status code */
  status?: number;
  /** HTTP status text */
  status_text?: string;
  /** Response headers */
  headers?: TestWebhook200ResponseHeaders;
  /** Response body */
  body?: string;
};

export type TestWebhook200 = {
  /** URL sent to */
  sent_to?: string;
  /** Payload sent */
  payload?: TestWebhook200Payload;
  response?: TestWebhook200Response;
  request_id?: string;
};

/**
 * The type of data to validate
 */
export type BatchValidateBodyType = typeof BatchValidateBodyType[keyof typeof BatchValidateBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BatchValidateBodyType = {
  email: 'email',
  phone: 'phone',
  address: 'address',
  'tax-id': 'tax-id',
} as const;

/**
 * Data items to validate (format depends on type)
 */
export type BatchValidateBodyDataItem = { [key: string]: unknown };

export type BatchValidateBody = {
  /** The type of data to validate */
  type: BatchValidateBodyType;
  /**
   * Array of items to validate
   * @maxItems 10000
   */
  data: BatchValidateBodyDataItem[];
};

/**
 * Job status
 */
export type BatchValidate202Status = typeof BatchValidate202Status[keyof typeof BatchValidate202Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BatchValidate202Status = {
  pending: 'pending',
} as const;

export type BatchValidate202 = {
  /** Unique job identifier */
  job_id?: string;
  /** Job status */
  status?: BatchValidate202Status;
  /** Request identifier */
  request_id?: string;
};

/**
 * The type of data to deduplicate
 */
export type BatchDedupeBodyType = typeof BatchDedupeBodyType[keyof typeof BatchDedupeBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BatchDedupeBodyType = {
  customers: 'customers',
  addresses: 'addresses',
} as const;

/**
 * Data items to deduplicate (format depends on type)
 */
export type BatchDedupeBodyDataItem = { [key: string]: unknown };

export type BatchDedupeBody = {
  /** The type of data to deduplicate */
  type: BatchDedupeBodyType;
  /**
   * Array of items to deduplicate
   * @maxItems 10000
   */
  data: BatchDedupeBodyDataItem[];
};

/**
 * Job status
 */
export type BatchDedupe202Status = typeof BatchDedupe202Status[keyof typeof BatchDedupe202Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BatchDedupe202Status = {
  pending: 'pending',
} as const;

export type BatchDedupe202 = {
  /** Unique job identifier */
  job_id?: string;
  /** Job status */
  status?: BatchDedupe202Status;
  /** Request identifier */
  request_id?: string;
};

/**
 * Current job status
 */
export type GetJobStatus200Status = typeof GetJobStatus200Status[keyof typeof GetJobStatus200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetJobStatus200Status = {
  pending: 'pending',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
} as const;

/**
 * Progress information (only available during processing)
 * @nullable
 */
export type GetJobStatus200Progress = {
  /** Total items to process */
  total?: number;
  /** Items processed so far */
  processed?: number;
  /** Completion percentage (0-100) */
  percentage?: number;
} | null;

export type GetJobStatus200 = {
  /** Unique job identifier */
  job_id?: string;
  /** Current job status */
  status?: GetJobStatus200Status;
  /**
   * Progress information (only available during processing)
   * @nullable
   */
  progress?: GetJobStatus200Progress;
  /**
   * URL to download results (only available when completed)
   * @nullable
   */
  result_url?: string | null;
  /**
   * Error message (only available when failed)
   * @nullable
   */
  error?: string | null;
  /** Job creation timestamp */
  created_at?: string;
  /** Last update timestamp */
  updated_at?: string;
  /** Request identifier */
  request_id?: string;
};

/**
 * Creates a new user account with default project and API key
 * @summary Register new user
 */
export const registerUser = <TData = AxiosResponse<RegisterUser201>>(
    registerUserBody: RegisterUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/register`,
      registerUserBody,options
    );
  }

/**
 * Authenticates a user and returns JWT token
 * @summary User login
 */
export const loginUser = <TData = AxiosResponse<LoginUser200>>(
    loginUserBody: LoginUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      loginUserBody,options
    );
  }

/**
 * Logs out the current user by clearing the session
 * @summary User logout
 */
export const logoutUser = <TData = AxiosResponse<LogoutUser200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }

/**
 * Retrieves API keys for the authenticated project
 * @summary List API keys
 */
export const listApiKeys = <TData = AxiosResponse<ListApiKeys200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/api-keys`,options
    );
  }

/**
 * Generates a new API key for the authenticated project
 * @summary Create API key
 */
export const createApiKey = <TData = AxiosResponse<CreateApiKey201>>(
    createApiKeyBody: CreateApiKeyBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/api-keys`,
      createApiKeyBody,options
    );
  }

/**
 * Revokes an API key by setting its status to revoked
 * @summary Revoke API key
 */
export const revokeApiKey = <TData = AxiosResponse<RevokeApiKey200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/api-keys/${id}`,options
    );
  }

/**
 * Performs basic address normalization without geocoding or external lookups.
 * @summary Normalize Address (Cheap)
 */
export const normalizeAddress = <TData = AxiosResponse<NormalizeAddress200>>(
    normalizeAddressBody: NormalizeAddressBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/normalize/address`,
      normalizeAddressBody,options
    );
  }

/**
 * Performs comprehensive email validation including format, MX records, and disposable detection
 * @summary Validate email address
 */
export const validateEmail = <TData = AxiosResponse<ValidateEmail200>>(
    validateEmailBody: ValidateEmailBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/validate/email`,
      validateEmailBody,options
    );
  }

/**
 * Validates a phone number and returns it in E.164 format
 * @summary Validate phone number
 */
export const validatePhone = <TData = AxiosResponse<ValidatePhone200>>(
    validatePhoneBody: ValidatePhoneBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/validate/phone`,
      validatePhoneBody,options
    );
  }

/**
 * Validates a physical address and normalizes it
 * @summary Validate address
 */
export const validateAddress = <TData = AxiosResponse<ValidateAddress200>>(
    validateAddressBody: ValidateAddressBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/validate/address`,
      validateAddressBody,options
    );
  }

/**
 * Validates a tax identification number
 * @summary Validate tax ID
 */
export const validateTaxId = <TData = AxiosResponse<ValidateTaxId200>>(
    validateTaxIdBody: ValidateTaxIdBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/validate/tax-id`,
      validateTaxIdBody,options
    );
  }

/**
 * Validates and normalizes a name string
 * @summary Validate name
 */
export const validateName = <TData = AxiosResponse<ValidateName200>>(
    validateNameBody: ValidateNameBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/validate/name`,
      validateNameBody,options
    );
  }

/**
 * Verifies OTP sent to phone number
 * @summary Verify phone OTP
 */
export const verifyPhoneOtp = <TData = AxiosResponse<VerifyPhoneOtp200>>(
    verifyPhoneOtpBody: VerifyPhoneOtpBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/verify/phone`,
      verifyPhoneOtpBody,options
    );
  }

/**
 * Searches for existing customers using deterministic and fuzzy matching
 * @summary Deduplicate customer
 */
export const dedupeCustomer = <TData = AxiosResponse<DedupeCustomer200>>(
    dedupeCustomerBody: DedupeCustomerBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/dedupe/customer`,
      dedupeCustomerBody,options
    );
  }

/**
 * Searches for existing addresses using deterministic and fuzzy matching
 * @summary Deduplicate address
 */
export const dedupeAddress = <TData = AxiosResponse<DedupeAddress200>>(
    dedupeAddressBody: DedupeAddressBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/dedupe/address`,
      dedupeAddressBody,options
    );
  }

/**
 * Merges multiple customer or address records into a canonical one
 * @summary Merge deduplicated records
 */
export const mergeDeduplicated = <TData = AxiosResponse<MergeDeduplicated200>>(
    mergeDeduplicatedBody: MergeDeduplicatedBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/dedupe/merge`,
      mergeDeduplicatedBody,options
    );
  }

/**
 * Evaluates an order for deduplication, validation, and applies business rules
 * @summary Evaluate order for risk and rules
 */
export const evaluateOrder = <TData = AxiosResponse<EvaluateOrder200>>(
    evaluateOrderBody: EvaluateOrderBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/orders/evaluate`,
      evaluateOrderBody,options
    );
  }

/**
 * Retrieves event logs for the project with optional filters
 * @summary Get event logs
 */
export const getLogs = <TData = AxiosResponse<GetLogs200>>(
    params?: GetLogsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/data/logs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieves usage statistics for the project
 * @summary Get usage statistics
 */
export const getUsage = <TData = AxiosResponse<GetUsage200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/data/usage`,options
    );
  }

/**
 * Retrieves tenant settings including country defaults, formatting, and risk thresholds
 * @summary Get tenant settings
 */
export const getSettings = <TData = AxiosResponse<GetSettings200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/settings`,options
    );
  }

/**
 * Updates tenant settings including country defaults, formatting, and risk thresholds
 * @summary Update tenant settings
 */
export const updateSettings = <TData = AxiosResponse<UpdateSettings200>>(
    updateSettingsBody: UpdateSettingsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/v1/settings`,
      updateSettingsBody,options
    );
  }

/**
 * Initiates data erasure for GDPR/CCPA compliance
 * @summary Erase user data
 */
export const eraseData = <TData = AxiosResponse<EraseData202>>(
    eraseDataBody: EraseDataBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/data/erase`,
      eraseDataBody,options
    );
  }

/**
 * Deletes a specific log entry
 * @summary Delete log entry
 */
export const deleteLog = <TData = AxiosResponse<DeleteLog200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/logs/${id}`,options
    );
  }

/**
 * Returns a list of all available validation and risk assessment rules
 * @summary Get available rules
 */
export const getRules = <TData = AxiosResponse<GetRules200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/rules`,options
    );
  }

/**
 * Returns a comprehensive list of all possible reason codes
 * @summary Get reason code catalog
 */
export const getReasonCodeCatalog = <TData = AxiosResponse<GetReasonCodeCatalog200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/rules/catalog`,options
    );
  }

/**
 * Returns a comprehensive list of all possible error codes
 * @summary Get error code catalog
 */
export const getErrorCodeCatalog = <TData = AxiosResponse<GetErrorCodeCatalog200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/rules/error-codes`,options
    );
  }

/**
 * Registers custom business rules for the project
 * @summary Register custom rules
 */
export const registerCustomRules = <TData = AxiosResponse<RegisterCustomRules200>>(
    registerCustomRulesBody: RegisterCustomRulesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/rules/register`,
      registerCustomRulesBody,options
    );
  }

/**
 * Performs a dry-run evaluation of a payload against all enabled validation rules.
 * @summary Test Rules Against Payload
 */
export const testRules = <TData = AxiosResponse<TestRules200>>(
    testRulesBody: TestRulesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/rules/test`,
      testRulesBody,options
    );
  }

/**
 * Retrieves webhooks for the authenticated project
 * @summary List webhooks
 */
export const listWebhooks = <TData = AxiosResponse<ListWebhooks200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/webhooks`,options
    );
  }

/**
 * Creates a new webhook subscription for the authenticated project
 * @summary Create webhook
 */
export const createWebhook = <TData = AxiosResponse<CreateWebhook201>>(
    createWebhookBody: CreateWebhookBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/webhooks`,
      createWebhookBody,options
    );
  }

/**
 * Deletes a webhook subscription
 * @summary Delete webhook
 */
export const deleteWebhook = <TData = AxiosResponse<DeleteWebhook200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/v1/webhooks/${id}`,options
    );
  }

/**
 * Sends a sample payload to the provided webhook URL
 * @summary Test webhook
 */
export const testWebhook = <TData = AxiosResponse<TestWebhook200>>(
    testWebhookBody: TestWebhookBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/webhooks/test`,
      testWebhookBody,options
    );
  }

/**
 * Performs batch validation of emails, phones, addresses, or tax IDs asynchronously
 * @summary Batch validate data
 */
export const batchValidate = <TData = AxiosResponse<BatchValidate202>>(
    batchValidateBody: BatchValidateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/batch/validate`,
      batchValidateBody,options
    );
  }

/**
 * Performs batch deduplication of customers or addresses asynchronously
 * @summary Batch deduplicate data
 */
export const batchDedupe = <TData = AxiosResponse<BatchDedupe202>>(
    batchDedupeBody: BatchDedupeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/v1/batch/dedupe`,
      batchDedupeBody,options
    );
  }

/**
 * Retrieves the status and results of an asynchronous job
 * @summary Get job status
 */
export const getJobStatus = <TData = AxiosResponse<GetJobStatus200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/v1/jobs/${id}`,options
    );
  }

export type RegisterUserResult = AxiosResponse<RegisterUser201>
export type LoginUserResult = AxiosResponse<LoginUser200>
export type LogoutUserResult = AxiosResponse<LogoutUser200>
export type ListApiKeysResult = AxiosResponse<ListApiKeys200>
export type CreateApiKeyResult = AxiosResponse<CreateApiKey201>
export type RevokeApiKeyResult = AxiosResponse<RevokeApiKey200>
export type NormalizeAddressResult = AxiosResponse<NormalizeAddress200>
export type ValidateEmailResult = AxiosResponse<ValidateEmail200>
export type ValidatePhoneResult = AxiosResponse<ValidatePhone200>
export type ValidateAddressResult = AxiosResponse<ValidateAddress200>
export type ValidateTaxIdResult = AxiosResponse<ValidateTaxId200>
export type ValidateNameResult = AxiosResponse<ValidateName200>
export type VerifyPhoneOtpResult = AxiosResponse<VerifyPhoneOtp200>
export type DedupeCustomerResult = AxiosResponse<DedupeCustomer200>
export type DedupeAddressResult = AxiosResponse<DedupeAddress200>
export type MergeDeduplicatedResult = AxiosResponse<MergeDeduplicated200>
export type EvaluateOrderResult = AxiosResponse<EvaluateOrder200>
export type GetLogsResult = AxiosResponse<GetLogs200>
export type GetUsageResult = AxiosResponse<GetUsage200>
export type GetSettingsResult = AxiosResponse<GetSettings200>
export type UpdateSettingsResult = AxiosResponse<UpdateSettings200>
export type EraseDataResult = AxiosResponse<EraseData202>
export type DeleteLogResult = AxiosResponse<DeleteLog200>
export type GetRulesResult = AxiosResponse<GetRules200>
export type GetReasonCodeCatalogResult = AxiosResponse<GetReasonCodeCatalog200>
export type GetErrorCodeCatalogResult = AxiosResponse<GetErrorCodeCatalog200>
export type RegisterCustomRulesResult = AxiosResponse<RegisterCustomRules200>
export type TestRulesResult = AxiosResponse<TestRules200>
export type ListWebhooksResult = AxiosResponse<ListWebhooks200>
export type CreateWebhookResult = AxiosResponse<CreateWebhook201>
export type DeleteWebhookResult = AxiosResponse<DeleteWebhook200>
export type TestWebhookResult = AxiosResponse<TestWebhook200>
export type BatchValidateResult = AxiosResponse<BatchValidate202>
export type BatchDedupeResult = AxiosResponse<BatchDedupe202>
export type GetJobStatusResult = AxiosResponse<GetJobStatus200>
