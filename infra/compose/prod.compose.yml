version: "3.9"
services:
  caddy:
    image: caddy:2.10.2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - postgres
      - valkey

  postgres:
    image: postgres:16.10
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: orbitcheck
    volumes:
      - "pg_data:/var/lib/postgresql/data"

  valkey:
    image: valkey/valkey:7.2.11
    command: ["--appendonly", "yes"]
    volumes:
      - "valkey_data:/data"

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  api:
    build:
      context: ../../
      dockerfile: apps/api/Dockerfile
    environment:
      PORT: 8080
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/orbitcheck
      REDIS_URL: redis://valkey:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      S3_SECRET_KEY: ${MINIO_SECRET_KEY}
      S3_BUCKET: orbitcheck
      NOMINATIM_URL: https://nominatim.openstreetmap.org
      LOCATIONIQ_KEY: ${LOCATIONIQ_KEY}
      VIES_WSDL_URL: https://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl
      RETENTION_DAYS: 90
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - postgres
      - valkey
      - minio

  glitchtip:
    image: glitchtip/glitchtip:latest
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/glitchtip
      SECRET_KEY: ${GLITCHTIP_SECRET}
    ports:
      - "8030:8000"
    depends_on:
      - postgres

  prom:
    image: prom/prometheus:v2.53.0
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    volumes:
      - "grafana_data:/var/lib/grafana"

  loki:
    image: grafana/loki:2.9.8
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ../loki/local-config.yaml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.9.8
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ../promtail/config.yml:/etc/promtail/config.yml
    depends_on:
      - loki

  uptime-kuma:
    image: louislam/uptime-kuma:1.23.13
    ports:
      - "3001:3001"
    volumes:
      - "uptime_kuma:/app/data"

  statping-ng:
    image: statping-ng/statping-ng:v0.90.80
    ports:
      - "8082:8080"
    volumes:
      - statping_data:/app
    environment:
      - DATABASE=sqlite
      - SELFHOST=true

  infisical-backend:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      infisical-db:
        condition: service_healthy
      infisical-redis:
        condition: service_started
    image: infisical/infisical:v0.150.0
    pull_policy: always
    env_file: .env.infisical
    ports:
      - "8085:8080"
    environment:
      - NODE_ENV=production
    networks:
      - infisical_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  infisical-redis:
    image: redis:7.2.5
    container_name: infisical-redis
    env_file: .env.infisical
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - infisical_net
    volumes:
      - infisical_redis_data:/data

  infisical-db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${INFISICAL_DB_PASSWORD}
      POSTGRES_USER: infisical
      POSTGRES_DB: infisical
    volumes:
      - infisical_pg_data:/var/lib/postgresql/data
    networks:
      - infisical_net
    healthcheck:
      test: "pg_isready --username=$${POSTGRES_USER} && psql --username=$${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

volumes:
  pg_data: {}
  valkey_data: {}
  minio_data: {}
  grafana_data: {}
  caddy_data: {}
  caddy_config: {}
  uptime_kuma: {}
  statping_data: {}
  infisical_pg_data:
    driver: local
  infisical_redis_data:
    driver: local
  infisical_credentials:
    driver: local

networks:
  infisical_net: